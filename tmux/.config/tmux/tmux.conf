# ████████╗███╗   ███╗██╗   ██╗██╗  ██╗
# ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝
#    ██║   ██╔████╔██║██║   ██║ ╚███╔╝
#    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗
#    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗
#    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝
# Terminal multiplexer
# https://github.com/tmux/tmux

# @credits: https://github.com/joshmedeski/dotfiles/blob/main/.config/tmux/tmux.conf

# If running inside tmux ($TMUX is set), then change the status line to red
%if #{TMUX}
    set -g status-bg red
%endif

set-option -ga terminal-overrides ',xterm-256color:TC' # TC | RGB
set-option -g focus-events on                          # Communicate focus events to vim
set-option -g default-terminal "tmux-256color"         # NOTE: DO NOT DELETE THIS> COLORS ALL COMMENTS BG.

set -g default-command /usr/bin/zsh
set -g default-shell /usr/bin/zsh

unbind C-b
set -g prefix C-a                           # Action Key. C-Space
bind C-a send-prefix                        # C-Space
set -g status-style 'bg=#333333 fg=#5eacd3' # set-option -g repeat-time 201 # Great for repat key press while resizing panes.

# Reload config
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded..."

set -g base-index 1 # Start with window number 1.
set -g detach-on-destroy off   # Don't exit from tmux when closing a seddion.
set -g escape-time 0            # No delay for escape key press. enable if leader <leader> Space clashes with neovim.
set -g history-limit 100000     # Increase history-limit.
set -g message-command-style bg=default,fg=yellow
set -g message-style bg=default,fg=yellow
set -g mode-style bg=default,fg=yellow                  #bg=default,fg=default #bg=colour235,fg=colour166
set -g mouse on                  # Enable mouse support.
set -g pane-base-index 1
set -g pane-active-border-style 'fg=violet,bg=default' #fg=colour4,bg=default #fg=colour166,bg=default
set -g pane-border-style 'fg=brightblack,bg=default'    #fg=colour235 #base02
set -g renumber-windows on       # Re-number windows on window close.
set -g set-clipboard on          # Use system clipboard.
#set -g window-style fg=default,bg=default               #set -g window-style fg=colour10,bg=default
#set -g window-active-style fg=default,bg=default        #set -g window-active-style fg=colour12,bg=default
set -g status-interval 3      # update the status bar every 3 seconds
set -g status-left "#[fg=blue,bold]#S #[fg=white,nobold]#(gitmux -cfg $HOME/.config/tmux/gitmux.conf)" # '#(tmux-cpu-info)' # https://github.com/jdxcode/tmux-cpu-info
set -g status-left-length 200 # increase status line length
set -g status-position top    # macOS / darwin style
set -g status-right "#[fg=magenta,bold]#{pane_current_command} #[fg=white,nobold]#(whoami)" # "#{tmux-cpu-info} #{pomodoro_status}"
set -g status-right-length 70 #set-option -g status-justify "left"
set -g status-style 'bg=default' # transparent
set -g window-status-current-format '#[fg=magenta]#W'
set -g window-status-format '#[fg=gray]#W'

set-window-option -g mode-keys vi
#bind F set -w window-size # A key to toggle between smallest and largest sizes if a window is visible in multiple places

# Setup 'v' to begin selection, just like Vim
# Setup 'y' to yank (copy), just like Vim
#bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xsel -ib -selection clipboard' #bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard' #bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel "pbcopy"
bind -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi 'V' send -X select-line
bind-key -T copy-mode-vi 'r' send -X rectangle-toggle

# @joshmedeski
# Note: this workflow works well when paired with christoomey/vim-tmux-navigator.
#bind-key -T copy-mode-vi 'C-h' select-pane -L
#bind-key -T copy-mode-vi 'C-j' select-pane -D
#bind-key -T copy-mode-vi 'C-k' select-pane -U
#bind-key -T copy-mode-vi 'C-l' select-pane -R
#bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
#bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt (cmd+w)

# vim-like pane switching
bind -r ^ last-window
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# Notify if other windows have activities.
setw -g monitor-activity on
set -g visual-activity on
set -g status on # on | off

bind-key C-t set-option status

# split panes using | and -
bind | split-window -h
bind - split-window -v
unbind '"'
unbind %

# dark necessities https://github.com/nguyenvukhang/dots/blob/main/tmux/.config/tmux/tmux.conf
bind :      command-prompt
bind ?      list-keys
#bind ? run-shell "tmux list-keys | fzf-tmux | awk -F: '{print $1}' | xargs -I {} tmux display-message -p 'tmux {}'"
#bind ? run-shell 'tmux set-option -g status-keys "emacs" \; \
                   new-session -d "tmux list-keys | fzf-tmux | awk -F: '\''{print $1}'\'' | xargs -I {} tmux display-message -p '\''tmux {}'\''" \; \
                   set-option -g status-keys "vi"'
bind d      detach-client
bind x      confirm-before -p "kill-pane #P? (y/n)" kill-pane
bind X      confirm-before -p "kill-window #P? (y/n)" kill-window
# bind-key x kill-pane # skip "kill-pane 1? (y/n)" prompt

# split automatically on startup
# FIXME no current target error
# split-window -h -c "#{pane_current_path}"
# select-pane -L

# Keep windows around after they exit
set -g remain-on-exit on

# Turn the mouse on, but without copy mode dragging
#set -g mouse on
#set-option -g mouse on
#unbind -n MouseDrag1Pane
#unbind -Tcopy-mode MouseDrag1Pane

bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'" # new window
bind c new-window -c "#{pane_current_path}"                              # Keep current path for new windows
bind G new-window -n '' gitui # NOTE: 'g' is linked to session switcher.
#bind G new-window -n '' gh dash
bind Space last-window                       # Toggle last windows
bind-key C-Space switch-client -l            # Toggle between current & previous session
bind -r e kill-pane -a                       # Kill all panes
bind-key -n C-S-Left swap-window -t -1 \; previous-window # Moving window
bind-key -n C-S-Right swap-window -t +1 \; next-window
unbind e                                     # Open ~/.tmux.conf in vim and reload settings on quit
bind e new-window -n '~/.config/tmux/tmux.conf' "sh -c 'nvim ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf'"
unbind D
#bind -r D neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/.dotfiles/personal/todo.md"
#bind D neww -n "TODO.md" -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/.dotfiles/personal/todo.md"
# TODO: put personal in .dotfiles , delete dir in root, and stow personal in dotfiles. make it git submodule, keep visibility to private

# use with tmux-open plugin FIXME
# Open current directory | Error(clashing with rotate panes)
#bind o run-shell "open #{pane_current_path}

# https://gist.github.com/gblmarquez/926c22db9e1702b1ad73
# smart pane switching with awareness of vim splits
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
# FIXME unknown key: C- run
# bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Some extra key bindings to select higher numbered windows
bind F1 selectw -t:10
bind F2 selectw -t:11
bind F3 selectw -t:12
bind F4 selectw -t:13
bind F5 selectw -t:14
bind F6 selectw -t:15
bind F7 selectw -t:16
bind F8 selectw -t:17
bind F9 selectw -t:18
bind F10 selectw -t:19
bind F11 selectw -t:20
bind F12 selectw -t:21

#set-option utf8-default on
#set-option -g mouse-select-pane
#set-window-option -g mode-keys vi
#set-window-option -g utf8 on

# import
#if-shell "uname -s | grep -q Darwin" "source ./macos.conf"

# don't rename windows automatically
# set-option -g allow-rename off

# auto window rename
set-window-option -g automatic-rename


# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind C-y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'
set -g renumber-windows on                      # Renumber windows on windows close

# list all paste buffers (default key is '#')
# bind-key b list-buffers
# choose buffer to paste interactively (default key was '=')
# bind-key p choose-buffer
# delete the most recently copied buffer of text (default key was '-')
# bind-key x delete-buffer

# scrolling with terminal scroll bar
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# CHEAT.SH
# https://github.com/ThePrimeagen/.dotfiles/blob/master/tmux/.tmux.conf
# bind-key -r i run-shell "tmux neww tmux-cht.sh"
# TODO: Add this to .local/..
bind-key -r i run-shell "tmux neww ~/.local/scripts/tmux-cht.sh"

# TODO rename these
# primeagean
# bind -r D neww -c "#{pane_current_path}" "[[ -e TODO.md ]] && nvim TODO.md || nvim ~/.dotfiles/personal/todo.md"
#bind-key -r G run-shell "~/.local/bin/tmux-sessionizer ~/work/nrdp"
#bind-key -r C run-shell "~/.local/bin/tmux-sessionizer ~/work/tvui"
#bind-key -r R run-shell "~/.local/bin/tmux-sessionizer ~/work/milo"
# bind-key -r L run-shell "~/.local/bin/tmux-sessionizer ~/work/hpack"
#bind-key -r H run-shell "~/.local/bin/tmux-sessionizer ~/personal/vim-with-me"
#bind-key -r T run-shell "~/.local/bin/tmux-sessionizer ~/personal/refactoring.nvim"
#bind-key -r N run-shell "~/.local/bin/tmux-sessionizer ~/personal/harpoon"
#bind-key -r S run-shell "~/.local/bin/tmux-sessionizer ~/personal/developer-productivity"

# Shortcuts
#
# <C-a>w - to open windows view.
# <C-a>s - to open sessions view.
# <C-a><C-s> - to save session. <C-a><C-r> to restore session.
# <C-a>[ - to use vim like scrollback terminal to copy paste.
# <C-a><S-[> OR <C-a><S-[> - to use move panes left/right OR up/down.
# <C-a>\ - to create new pane.
# <C-a>I - to install plugins.
# <C-a>U - to update plugins.
# <C-a>' - go to window index.

# Plugin options. (tilish + navigate)
set -g @tilish-navigate 'on'                         # use Alt Mod1 like i3 to nvaigate panes workspaces. Alt + 1, ... with tilish
set -g @tilish-default 'tiled'                       # 'tiled', 'main-vertical' For tmux v2.7+, you can customize which layout is used as default for new workspaces. To do so, add this to ~/.tmux.conf:
set -g @tilish-dmenu 'on' # <C-a><M-d> (open dmenu with fzf in tmux pane)
#set -g @tilish-navigator 'on' # integration with  vim-tmux-navigator.

# if you're using QWERTY layout
set -g @navigate-left  '-n M-h'
set -g @navigate-down  '-n M-j'
set -g @navigate-up    '-n M-k'
set -g @navigate-right '-n M-l'
set -g @navigate-back  '-n M-\'

# NOTE: toggle tmux-nerd-font-... plugin if error.
# allow the title bar to adapt to whatever host you connect to
set -g set-titles on
set -g set-titles-string "#T"

set -g @fzf-url-fzf-options '-p 60%,30% --prompt="   " --border-label=" Open URL " --multi -0'
set -g @fzf-url-bind 'u'        # default is `u` for fzf-url. [See more](https://github.com/wfxr/tmux-fzf-url)
set -g @fzf-url-history-limit '2000'
#set -g @tmux-nerd-font-window-name-show-name false
#set -g @tmux-nerd-font-window-name-shell-icon ""
set -g @t-fzf-prompt '  '
set -g @t-bind 'T'
set -g @pomodoro_on " 🍅"       # The formatted output when the pomodoro is running
set -g @pomodoro_complete " ✅" # The formatted output when the pomodoro is finished
# FIXME: Clashes with p and n, going to windows.
#set -g @pomodoro_start 'P'     # Start a Pomodoro with tmux-prefix + p
#set -g @pomodoro_cancel '-'    # Cancel a Pomodoro with tmux-prefix key + P

# List of plugins

# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'

set -g @plugin 'joshmedeski/t-smart-tmux-session-manager'
set -g @plugin 'joshmedeski/tmux-fzf-url'
#set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'
#set -g @plugin 'olimorris/tmux-pomodoro-plus'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'tmux-plugins/tmux-sessionist'
set -g @plugin 'tmux-plugins/tmux-logging'
set -g @plugin 'tmux-plugins/tmux-battery'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'

set -g @plugin 'jabirali/tmux-tilish'               #  Plugin which makes tmux work and feel like i3wm
set -g @plugin 'sunaku/tmux-navigate' #load navigate after tilish in your tmux.conf, and set the option @tilish-navigate to on to integrate them.
#set -g @open-S 'https://www.google.com/search?q='

#FIXME: SETUP integration with tmux-tilish to fix vim-tmux-navigator. [See](https://github.com/jabirali/tmux-tilish#navigator)
#Why?^Messes with Ctrl+L or Ctrl+J/K in fzf or shell
#set -g @plugin 'christoomey/vim-tmux-navigator'

# TODO: Audit these plugins.
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'

#source "$HOME/.config/tmux/statusline.conf" # statusline theme
#source "$HOME/.config/tmux/utility.conf" # utilities | lazygit

# `tmux-continuum` & `tmux-resurrect`.
set -g @continuum-restore 'off'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-strategy-nvim 'session'

setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"

# Automatic tpm installation
# One of the first things we do on a new machine is cloning our dotfiles. Not everything comes with them though, so for example tpm most likely won't be installed.
# If you want to install tpm and plugins automatically when tmux is started, put the following snippet in .tmux.conf before the final run '~/.tmux/plugins/tpm/tpm':
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# Initialize TMUX plugin manager. (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
